@inject HttpClient Http
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService

<MudPaper Class="mud-width-full pa-4">
    <div class="d-flex">
        <MudText Class="mt-1">Installers </MudText>
        @* <MudButton Class="d-flex ml-auto" Variant="Variant.Filled" Color="Color.Secondary" OnClick="AddVersion">
        Add new version
        </MudButton> *@
        <MudIconButton Variant="Variant.Filled" Class="d-flex ml-auto" Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="AddInstaller" />
    </div>

    @if (Version.Installers == null)
    {
        <MudText Class="mt-1">No installer found</MudText>
    }
    else
    {
        <MudList>

            @foreach (var item in Version.Installers)
            {
                <MudListItem>
                    <div class="d-flex">
                        <MudIconButton Variant="Variant.Filled" Class="d-flex ml-2" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" @onclick="(e=> OnEditInstallerButtonClicked(item.Id))" />
                        <MudIconButton Variant="Variant.Filled" Class="d-flex ml-2 mr-2" Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Secondary" @onclick="(e=> OnDeleteInstallerButtonClicked(item.Id))" />
                        <MudChip Class="m-1">Scope : @item.Scope</MudChip>
                            <MudChip Class="m-1">Architecture : @item.Architecture</MudChip>
                            <MudChip Class="m-1">Filetype : @item.InstallerType</MudChip>
                            <MudChip Class="m-1">Filename : @item.FileName </MudChip>
                        </div>
                    </MudListItem>
            }

        </MudList>
    }

</MudPaper>

@code {
    [Parameter] public PackageVersion Version { get; set; }

    private void AddInstaller()
    {
        //NavigationManager.NavigateTo("/packageEdit/" + PackageID + "/versionEdit/" + versionId);
    }

    private void OnEditInstallerButtonClicked(int versionId)
    {
        //NavigationManager.NavigateTo("/packageEdit/" + PackageID + "/versionEdit/" + versionId);
    }

    private async void OnDeleteInstallerButtonClicked(int versionId)
    {
        bool? confirm = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");
        if (confirm == true)
        {
            //await Http.DeleteAsync("api/v1/packages/" + Package.Id + "/versions/" + versionId);
        }
    }
}
