@inject HttpClient Http
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService


<MudPaper Class="mud-width-full pa-4">
    <div class="d-flex">
        <MudText Class="mt-1">Versions </MudText>
        @* <MudButton Class="d-flex ml-auto" Variant="Variant.Filled" Color="Color.Secondary" OnClick="AddVersion">
        Add new version
        </MudButton> *@
        <MudIconButton Variant="Variant.Filled" Class="d-flex ml-auto" Icon="@Icons.Material.Filled.Add" 
                        Color="Color.Primary" OnClick="AddVersion" />
    </div>

@*     <MudDrawer @bind-Open="@versionEditOpen" Elevation="0" Variant="@DrawerVariant.Persistent"
               Color="Color.Primary" Anchor="Anchor.End" Width="400px">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">My App</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard" IconColor="Color.Inherit">Dashboard</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.LocalLibrary" IconColor="Color.Inherit">Library</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.People" IconColor="Color.Inherit">Community</MudNavLink>
        </MudNavMenu>
    </MudDrawer> *@

    @if (Package.Versions == null || Package.Versions.Count() == 0)
    {
        <MudText Class="mt-1">No version found</MudText>
    }
    else
    {
        <MudExpansionPanels Elevation="0">
            @foreach (var version in Package.Versions)
                {
                    <MudExpansionPanel MaxHeight="150">
                        <TitleContent>
                            <div class="d-flex">
                                <MudIconButton Variant="Variant.Filled" Class="d-flex ml-2" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" @onclick="(e=> OnEditVersionButtonClicked(version.Id))" />
                                <MudIconButton Variant="Variant.Filled" Class="d-flex ml-2 mr-2" Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Secondary" @onclick="(e=> OnDeleteVersionButtonClicked(version.Id))" />
                                <MudText Class="mt-2">Version @version.VersionCode</MudText>
                                <MudText Overlap="true" Class="d-flex ml-auto mr-4 mt-2">created @version.DateAdded</MudText>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <div class="mb-4">
                                <InstallerList Version="version"  />
                            </div>
                        </ChildContent>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
    }
</MudPaper>


@code {
    [Parameter] public Package? Package { get; set; }

    private string searchString = "";
    private bool isLoading = false;
    private IEnumerable<PackageVersion> versions = new List<PackageVersion>();

    bool versionEditOpen = false;

    protected override async Task OnInitializedAsync()
    {
        //await GetPackageVersions();
    }

    private async Task GetPackageVersions()
    {
        isLoading = true;
        try
        {
            versions = await Http.GetFromJsonAsync<IEnumerable<PackageVersion>>("api/v1/packages/" + Package.Identifier + "/versions");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        isLoading = false;
    }

    private bool Search(PackageVersion version)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (version.ShortDescription.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (version.DefaultLocale.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (version.VersionCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task AddVersion()
    {
        //versionEditOpen = true;
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = false, 
            MaxWidth = MaxWidth.Medium, 
            FullWidth = true, 
            CloseButton = true 
        };

        var version = new PackageVersion { PackageId = Package.Id };
        var parameters = new DialogParameters<AddVersion> { { x => x.package, Package }, { x => x.version, version } };

        var dialog = await DialogService.ShowAsync<AddVersion>($"Update {Package.Name}", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var data = result.Data as Package;

            // var res = await Http.PutAsJsonAsync($"api/v1/packages", data);

            // if (!res.IsSuccessStatusCode)
            // {
            //     var error = await res.Content.ReadAsStringAsync();
            //     snackBar.Add(error, Severity.Error);
            // }
            // else
            // {
            //     snackBar.Add("Package updated successfully.", Severity.Success);
            //     await GetPackages();
            // }
        }
    }

private void OnEditVersionButtonClicked(int versionId)
    {
        //NavigationManager.NavigateTo("/packageEdit/" + PackageID + "/versionEdit/" + versionId);
    }

private async void OnDeleteVersionButtonClicked(int versionId)
    {
        bool? confirm = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");
        if (confirm == true)
        {
            await Http.DeleteAsync("api/v1/packages/" + Package.Id + "/versions/" + versionId);
            await GetPackageVersions();
        }
    }
}
